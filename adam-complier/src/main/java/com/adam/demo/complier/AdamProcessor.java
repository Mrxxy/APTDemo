package com.adam.demo.complier;

import com.adam.demo.annotation.Adam;
import com.google.auto.service.AutoService;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

import java.io.IOException;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedOptions;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;
import javax.lang.model.util.Types;
import javax.tools.Diagnostic;

@AutoService(Processor.class)
@SupportedAnnotationTypes({"com.adam.demo.annotation.Adam"})
@SupportedSourceVersion(SourceVersion.RELEASE_8)
@SupportedOptions("param")
public class AdamProcessor extends AbstractProcessor {

    private Elements elementUtils;
    private Messager messager;
    private Filer filer;
    private Types typeUtils;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnvironment) {
        super.init(processingEnvironment);
        elementUtils = processingEnvironment.getElementUtils();
        messager = processingEnvironment.getMessager();
        filer = processingEnvironment.getFiler();
        typeUtils = processingEnvironment.getTypeUtils();

        String param = processingEnvironment.getOptions().get("param");
        messager.printMessage(Diagnostic.Kind.NOTE, "module param is " + param);
    }

    @Override
    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {
        if (set.isEmpty()) return false;

        Set<? extends Element> elements = roundEnvironment.getElementsAnnotatedWith(Adam.class);
        for (Element element : elements) {
            String packageName = elementUtils.getPackageOf(element).getQualifiedName().toString();

            String className = element.getSimpleName().toString();
            messager.printMessage(Diagnostic.Kind.NOTE, "class name is " + className);
            final String finalClassName = className + "$$Adam";

            Adam adam = element.getAnnotation(Adam.class);
            messager.printMessage(Diagnostic.Kind.NOTE, "adam path is " + adam.path());

            try {
                JavaFile.builder(packageName,
                        TypeSpec.classBuilder(finalClassName)
                                .addJavadoc("DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY ADAM.")
                                .addField(FieldSpec.builder(TypeName.INT, "maxNumber", Modifier.PRIVATE).build())
                                .addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PRIVATE).build())
                                .addMethod(MethodSpec.methodBuilder("findTargetClass")
                                        .addModifiers(Modifier.STATIC, Modifier.PUBLIC)
                                        .addParameter(String.class, "path")
                                        .addStatement("return path.equals($S) ? $T.class : null",
                                                adam.path(), ClassName.get((TypeElement) element))
                                        .returns(Class.class)
                                        .build())
                                .addMethod(MethodSpec.methodBuilder("findMax")
                                        .addModifiers(Modifier.PUBLIC)
                                        .addParameter(TypeName.INT, "a")
                                        .addParameter(TypeName.INT, "b")
                                        .addStatement("int max = a")
                                        .beginControlFlow("if (a < b)")
                                        .addStatement("max = b")
                                        .endControlFlow()
                                        .addStatement("return max")
                                        .returns(TypeName.INT)
                                        .build())
                                .build())
                        .build().writeTo(filer);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        return true;
    }
}